resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

resources:
- name: operations-manager-pivnet
  type: pivnet
  source:
    api_token: {{pivnet_token}}
    product_slug: ops-manager
    product_version: {{operations_manager_regex}}
    sort_by: semver

- name: operations-manager-s3
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    endpoint: {{s3_endpoint}}
    bucket: {{s3_bucket}}
    regexp: "staging/ops-manager/ops-manager-(.*).tar"

- name: elastic-runtime-pivnet
  type: pivnet
  source:
    api_token: {{pivnet_token}}
    product_slug: elastic-runtime
    product_version: {{elastic_runtime_regex}}
    sort_by: semver

- name: elastic-runtime-s3
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    endpoint: {{s3_endpoint}}
    bucket: {{s3_bucket}}
    regexp: "staging/elastic-runtime/elastic-runtime-(.*).tar"

- name: stemcells-s3
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    endpoint: {{s3_endpoint}}
    bucket: {{s3_bucket}}
    regexp: "staging/stemcells/bosh-stemcell-(.*)-.*.tgz"
    disable_ssl: false

- name: czero-cflinuxfs2
  type: docker-image
  source:
    repository: czero/cflinuxfs2
    tag: latest

- name: czero-cflinuxfs2-s3
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    endpoint: {{s3_endpoint}}
    bucket: {{s3_bucket}}
    regexp: "staging/czero-cflinuxfs2/czero-cflinuxfs2-(.*)-.*.tar"

- name: czero-cflinuxfs2-version
  type: semver
  source:
    initial_version: 0.0.0
    driver: s3
    bucket: {{s3_bucket}}
    key: "staging/czero-cflinuxfs2/version"
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    endpoint: {{s3_endpoint}}

- name: pcf-tile-automation-tarball
  type: pivnet
  source:
    api_token: {{pivnet_token}}
    product_slug: pcf-automation

- name: pcf-tile-automation-combined-version
  type: semver
  source:
    initial_version: 0.0.0
    driver: s3
    bucket: {{s3_bucket}}
    key: "pcf-tile-automation-combined/version"
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    endpoint: {{s3_endpoint}}

- name: pcf-tile-automation-s3
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    endpoint: {{s3_endpoint}}
    bucket: {{s3_bucket}}
    regexp: "staging/pcf-tile-automation/pcf-tile-automation-v(.*).tgz"

- name: pcf-tile-automation-combined
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    endpoint: {{s3_endpoint}}
    bucket: {{s3_bucket}}
    regexp: "pcf-tile-automation-combined/pcf-tile-automation-combined-(.*).tar"

- name: fly
  type: github-release
  check_every: 720h
  source:
    user: krishicks
    repository: fly
    access_token: {{github_token}}

jobs:
- name: create-offline-pinned-pipelines
  plan:
  - aggregate:
    - get: czero-cflinuxfs2
      trigger: true
    - get: czero-cflinuxfs2-version
      params: { bump: major }
    - get: operations-manager-pivnet
      trigger: true
      params: { globs: [] }
    - get: elastic-runtime-pivnet
      trigger: true
      params: { globs: [] }
    - get: fly
    - do:
      - get: pcf-tile-automation-tarball
        trigger: true
      - task: unpack-pcf-tile-automation
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: czero/cflinuxfs2
          inputs:
          - name: pcf-tile-automation-tarball
          outputs:
          - name: pcf-tile-automation
          run:
           path: bash
           args: ["-c", "tar -xvzf pcf-tile-automation-tarball/*.tgz"]
  - task: create-pipelines
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: czero/cflinuxfs2}
      inputs:
      - name: czero-cflinuxfs2
      - name: czero-cflinuxfs2-version
      - name: operations-manager-pivnet
      - name: elastic-runtime-pivnet
      - name: pcf-tile-automation-tarball
      - name: pcf-tile-automation
      - name: fly
      outputs:
      - name: pcf-tile-automation-offline-pinned-tarball
      run:
        path: bash
        args:
        - -c
        - |
          set -o pipefail
          set -eu

          root=$PWD

          chmod +x fly/fly
          export PATH="${root}/fly:${PATH}"

          opsman_version=$(
            cat operations-manager-pivnet/metadata.json | jq --raw-output '.Release.Version'
          )
          ert_version=$(
            cat elastic-runtime-pivnet/metadata.json | jq --raw-output '.Release.Version'
          )
          czero_cflinuxfs2_version=$(cat czero-cflinuxfs2-version/version)
          pcf_pipelines_version=$(
            cat pcf-tile-automation-tarball/metadata.json | jq --raw-output '.Release.Version'
          )

          echo "Pinning gets of resources to specific versions:"
          echo "  ops-manager -> ${opsman_version}"
          echo "  elastic-runtime -> ${ert_version}"
          echo "  czero-cflinuxfs2 -> ${czero_cflinuxfs2_version}"
          echo "  pcf-tile-automation -> ${pcf_pipelines_version}"
          echo

          cat > pin-resource-gets.yml <<EOF
          - op: add
            path: /jobs/get=pivnet-opsman-product/version
            value:
              path: "ops-manager/ops-manager-${opsman_version}.tar"
          - op: add
            path: /jobs/get=pcf-ops-manager/version
            value:
              path: "ops-manager/ops-manager-${opsman_version}.tar"
          - op: add
            path: /jobs/get=pivnet-product/version
            value:
              path: "elastic-runtime-pivnet/elastic-runtime-${ert_version}.tar"
          - op: replace
            path: /jobs/regexp=czero-cflinuxfs2~1czero-cflinuxfs2-(.*)-.*.tar
            value:
              path: "czero-cflinuxfs2/czero-cflinuxfs2-(${czero_cflinuxfs2_version})-.*.tar"
          EOF

          mkdir -p pcf-tile-automation-offline-pinned/install-pcf/vsphere

          echo "Creating install-pcf/vsphere/pipeline.yml"
          fly fmt -c <(
            cat pcf-tile-automation/install-pcf/vsphere/offline/pipeline.yml |
              yaml_patch_linux -o pin-resource-gets.yml
          ) > pcf-tile-automation-offline-pinned/install-pcf/vsphere/pipeline.yml

          pcf_pipelines_version=$(
            cat pcf-tile-automation-tarball/metadata.json | jq --raw-output '.Release.Version'
          )

          echo "Creating install-pcf/vsphere/params.yml"
          cp pcf-tile-automation/install-pcf/vsphere/offline/params.yml \
            pcf-tile-automation-offline-pinned/install-pcf/vsphere/params.yml

          echo "Creating unpack-pcf-tile-automation-combined/pipeline.yml"
          cat > steamroll_config.yml <<EOF
          resource_map:
            "pcf-tile-automation": $root/pcf-tile-automation
          EOF
          mkdir -p pcf-tile-automation-offline-pinned/unpack-pcf-tile-automation-combined
          fly fmt -c <(
            steamroll -p pcf-tile-automation/unpack-pcf-tile-automation-combined/pipeline.yml -c steamroll_config.yml
          ) > pcf-tile-automation-offline-pinned/unpack-pcf-tile-automation-combined/pipeline.yml

          echo "Creating unpack-pcf-tile-automation-combined/params.yml"
          cp pcf-tile-automation/unpack-pcf-tile-automation-combined/params.yml \
            pcf-tile-automation-offline-pinned/unpack-pcf-tile-automation-combined/params.yml

          echo "Creating offline pinned tarball"
          tar czv \
          -f "pcf-tile-automation-offline-pinned-tarball/pcf-tile-automation-${pcf_pipelines_version}.tgz" \
          -C pcf-tile-automation-offline-pinned \
          .
  - put: pcf-tile-automation-s3
    params:
      file: "pcf-tile-automation-offline-pinned-tarball/*.tgz"

- name: create-ops-manager-tarball
  plan:
  - get: pcf-tile-automation-s3
    trigger: true
    passed: [create-offline-pinned-pipelines]
  - get: operations-manager-pivnet
    passed: [create-offline-pinned-pipelines]
    params:
      globs: ["*.ova"]
  - task: create-tarball
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: czero/cflinuxfs2
      inputs:
      - name: operations-manager-pivnet
      outputs:
      - name: ops-manager-tarball
      run:
        path: bash
        args:
        - -c
        - |
          set -eu

          version=$(cat operations-manager-pivnet/metadata.json | jq --raw-output '.Release.Version')

          echo "Creating tarball with version ${version}..."
          tar cf "ops-manager-tarball/ops-manager-${version}.tar" -C operations-manager-pivnet .
  - put: operations-manager-s3
    params:
      file: "ops-manager-tarball/ops-manager-*.tar"

- name: create-elastic-runtime-tarball
  plan:
  - get: pcf-tile-automation-s3
    trigger: true
    passed: [create-offline-pinned-pipelines]
  - get: elastic-runtime-pivnet
    passed: [create-offline-pinned-pipelines]
    params:
      globs: ["*.pivotal"]
  - task: create-tarball
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: czero/cflinuxfs2
      inputs:
      - name: elastic-runtime-pivnet
      outputs:
      - name: elastic-runtime-tarball
      - name: stemcell-tarball
      params:
        PIVNET_API_TOKEN: {{pivnet_token}}
      run:
        path: bash
        args:
        - -c
        - |
          set -eu

          stemcell_version=$(
            cat ./elastic-runtime-pivnet/metadata.json |
            jq --raw-output \
              '
              [
                .Dependencies[]
                | select(.Release.Product.Name | contains("Stemcells"))
                | .Release.Version
              ] | sort | last // empty
              '
          )

          if [ -z "$stemcell_version" ]; then
            echo "Expected to find stemcell version in ./elastic-runtime-pivnet/metadata.json, did not."
            exit 1
          fi

          echo "Downloading stemcell $stemcell_version"
          pivnet-cli login --api-token="$PIVNET_API_TOKEN"
          pivnet-cli download-product-files -p stemcells -r $stemcell_version -g "*vsphere*" --accept-eula

          stemcell_path=$(find . -name *bosh-stemcell-*.tgz)

          if [ ! -f "$stemcell_path" ]; then
            echo "Stemcell file not found!"
            exit 1
          fi

          mv $stemcell_path stemcell-tarball/

          version=$(cat elastic-runtime-pivnet/metadata.json | jq --raw-output '.Release.Version')

          tar cvf "elastic-runtime-tarball/elastic-runtime-${version}.tar" -C elastic-runtime-pivnet .
  - put: elastic-runtime-s3
    params:
      file: "elastic-runtime-tarball/elastic-runtime-*.tar"
  - put: stemcells-s3
    params:
      file: "stemcell-tarball/*.tgz"

- name: create-czero-cflinuxfs2-tarball
  plan:
  - aggregate:
    - get: pcf-tile-automation-s3
      trigger: true
      passed: [create-offline-pinned-pipelines]
    - get: czero-cflinuxfs2
      passed: [create-offline-pinned-pipelines]
    - get: czero-cflinuxfs2-version
      params: {bump: major}
  - task: create-tarball
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: czero/cflinuxfs2
      inputs:
      - name: czero-cflinuxfs2
      - name: czero-cflinuxfs2-version
      outputs:
      - name: czero-cflinuxfs2-tarball
      run:
        path: bash
        args:
        - -c
        - |
          set -eu

          version=$(cat czero-cflinuxfs2-version/version)
          digest=$(cat czero-cflinuxfs2/digest)

          echo "Creating tarball with version ${version}-${digest}..."
          tar cf "czero-cflinuxfs2-tarball/czero-cflinuxfs2-${version}-${digest}.tar" -C czero-cflinuxfs2 .
  - put: czero-cflinuxfs2-version
    params: {bump: major}
  - put: czero-cflinuxfs2-s3
    params:
      file: "czero-cflinuxfs2-tarball/czero-cflinuxfs2-*.tar"

- name: create-pcf-tile-automation-combined
  plan:
  - aggregate:
    - get: pcf-tile-automation-s3
      trigger: true
      passed:
      - create-czero-cflinuxfs2-tarball
      - create-ops-manager-tarball
      - create-elastic-runtime-tarball
    - get: pcf-tile-automation-combined-version
      params: { bump: major }
    - get: czero-cflinuxfs2-s3
      passed: [create-czero-cflinuxfs2-tarball]
    - get: operations-manager-s3
      passed: [create-ops-manager-tarball]
    - get: elastic-runtime-s3
      passed: [create-elastic-runtime-tarball]
    - get: stemcells-s3
      passed: [create-elastic-runtime-tarball]
  - task: create-tarball
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: czero/cflinuxfs2}
      inputs:
      - name: pcf-tile-automation-s3
      - name: pcf-tile-automation-combined-version
      - name: czero-cflinuxfs2-s3
      - name: operations-manager-s3
      - name: elastic-runtime-s3
      - name: stemcells-s3
      outputs:
      - name: pcf-tile-automation-combined
      run:
        path: bash
        args:
        - -c
        - |
          set -eu

          mkdir -p pcf-tile-automation-combined-contents

          mv \
            czero-cflinuxfs2-s3/*.tar \
            operations-manager-s3/*.tar \
            elastic-runtime-s3/*.tar \
            stemcells-s3/*.tgz \
            pcf-tile-automation-s3/*.tgz \
            pcf-tile-automation-combined-contents

          pushd pcf-tile-automation-combined-contents
            shasum * > MANIFEST.MF
          popd

          version=$(cat pcf-tile-automation-combined-version/version)

          tar cv \
          -f "pcf-tile-automation-combined/pcf-tile-automation-combined-${version}.tar" \
          -C pcf-tile-automation-combined-contents \
          .
  - put: pcf-tile-automation-combined
    params:
      file: "pcf-tile-automation-combined/*.tar"
  - put: pcf-tile-automation-combined-version
    params: { bump: major }
